{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Example VPC that has two public subnets and two private subnets in different AZs",

  "Parameters": {
    "NamePrefix": {
      "Description": "Prefix for TagKey:Name",
      "Type": "String",
      "Default": "Name"
    },
    "Hostname": {
      "Description": "Server hostname",
      "Type": "String",
      "Default": "Name"
    },
    "HostedZoneName": {
      "Description": "Hosted Zone name",
      "Type": "String",
      "Default": "sycompdev.com."
    },
    "PrimaryAZ": {
      "Description": "Choose the Primary Availability Zone",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "SecondaryAZ": {
      "Description": "Choose the Secondary Availability Zone (Must be different than Primary)",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "CidrBlock": {
      "Description": "CIDR Block for VPC, eg. 10.201.0.0/22",
      "Type": "String",
      "Default": "10.201.0.0/22",
      "AllowedValues": [
        "10.200.0.0/22",
        "10.201.0.0/22",
        "10.202.0.0/22",
        "10.203.0.0/22",
        "10.204.0.0/22",
        "10.205.0.0/22",
        "10.206.0.0/22",
        "10.207.0.0/22",
        "10.208.0.0/22",
        "10.209.0.0/22"
      ]
    }

  },

  "Resources": {

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.201.0.0/16",
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },

    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.201.0.0/24",
        "AvailabilityZone": {
          "Fn::Select": ["0", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },

    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.201.1.0/24",
        "AvailabilityZone": {
          "Fn::Select": ["1", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },

    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "PublicSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },

    "InboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },

    "InboundHTTPSPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },

    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },

    "InboundDynamicPortsPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },

    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "PublicSubnetNetworkAclAssociation1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },

    "PublicSubnetNetworkAclAssociation2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },

    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.201.2.0/24",
        "AvailabilityZone": {
          "Fn::Select": ["0", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },

    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.201.3.0/24",
        "AvailabilityZone": {
          "Fn::Select": ["1", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },

    "PrivateRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },

    "PrivateRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }
      }
    },

    "PrivateSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        }
      }
    },

    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }

          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },

    "InboundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "OutboundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "PrivateSubnetNetworkAclAssociation1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },

    "PrivateSubnetNetworkAclAssociation2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Description": "VPC",
      "Value": {
        "Ref": "VPC"
      }
    },
    "PublicSubnets": {
      "Description": "Public subnet",
      "Value": {
        "Fn::Join": [",", [{
          "Ref": "PublicSubnet1"
        }, {
          "Ref": "PublicSubnet2"
        }]]
      }
    },
    "PrivateSubnets": {
      "Description": "Private subnet",
      "Value": {
        "Fn::Join": [",", [{
          "Ref": "PrivateSubnet1"
        }, {
          "Ref": "PrivateSubnet2"
        }]]
      }
    },
    "AZs": {
      "Description": "Availability zones",
      "Value": {
        "Fn::Join": [",", [{
          "Fn::GetAtt": ["PrivateSubnet1", "AvailabilityZone"]
        }, {
          "Fn::GetAtt": ["PrivateSubnet2", "AvailabilityZone"]
        }]]
      }
    }
  }
}